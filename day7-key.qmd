---
title: "Joins and strings and dates"
format: html
editor: visual
---

```{r}
library(datapasta)
library(tidyverse)
library(palmerpenguins)
library(lubridate)
```

## Mutating Joins

```{r}
# using "Addins" -> paste with data pasta. This is highly not recommended because not reproducible really.

animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )
```

### Full Join

```{r}
full_join_example <- full_join(animals, sites, by = "location") # in this case, the key is the same and unique but if the key column names differ we can use "by = c("a" = "b")"
```

### Left Join

```{r}
left_join_example <- left_join(x = animals, y = sites, by = "location")
```

### Inner Join

```{r}
inner_join_example <- inner_join(animals, sites, by = "location")
```

```{r}
# example where key isn't the same exact name
sites_2 <- sites |> 
  rename(loc = location)

inner_join_example2 <- inner_join(animals, sites_2, by = c("location" = "loc"))
```

## Filtering Joins

### Semi Join

-   returns all rows from x that have a key match in y

    ```{r}
    semi_join_example <- semi_join(x = animals, y = sites) # creek is in animals but not in sites so this will get dropped
    ```

### Anti Join

-   only returns rows in x that don't have a match in y (what's the key in x that isn't the key in y?)

```{r}
anti_join_example <- anti_join(animals, sites) # show what's in x that's not in y which is the creek observation
```

## Refresher 1

```{r}
refresher_1 <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(-year, -sex) |> 
  mutate(body_mass_kg = (body_mass_g / 1000)) |> 
  rename(location = island)
```

## Refresher 2

```{r}
#refresher_2 <- penguins |> 
  #filter(!is.na(flipper_length_mm)) |> 
  #group_by(sex) |> 
  #summarize()
```

## Dates and times with `lubridate`

```{r}
my_date <- "03-15-1998"
lubridate::mdy(my_date)

my_date <- "11/7/2022" # this could be nov 7 or july 11. if this is dmy:
lubridate::dmy(my_date)

my_date <- "08-Jun-1974"
lubridate::dmy(my_date)

my_date <- "19610518"
my_real_date <- lubridate::ymd(my_date)
```

## Trying to Break Stuff

```{r}
lubridate::mdy("1942-08-30")
```

```{r}
time <- "2022-08-12 11:18"
time <- lubridate::ymd_hm(time)
```

```{r}
with_tz(time, "America/Los_Angeles") # converts from UTC time to pacific time

with_tz(time, "Europe/Rome")

# pull out specific aspects of the datetime. Helpful when you want to group by months! or add a new column that only contains the month for summary statistics
my_time <- lubridate::ymd_hms(time)

year(my_time)
hour(my_time)
```

```{r}
teddy_bday <- lubridate::ymd("20170615")

#what day of the week is this?
wday(teddy_bday, label = TRUE)
week(teddy_bday)

my_birthday <- lubridate::ymd("19961021")
wday(my_birthday, label = TRUE)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2022", "purple", 55,
  "10/4/2022", "red", 48,
  "11/17/2022", "red", 67
)

urchin_ymd <- urchin_counts |> 
  mutate(date = lubridate::mdy(date)) |> 
  mutate(year = year(date),
         month = month(date),
         day = day(date))
```

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)

time_length(time_interval, "year") # this is asking: how long is the interval between these two dates in years?
```

## String Wrangling

```{r}
my_string <- "Teddy loves eating salmon and socks."

my_string |> 
  str_detect("pup") # will return false 

my_string <- c("burrito", "fish taco", "taco salad")

my_string |> 
  str_detect("fish") # will return false true false
```

```{r}
skywalkers <- starwars |> 
  filter(str_detect(string = name, pattern = "Skywalker")) # looks in the name column for skywalker in it

eye_subset <- starwars |> 
  filter(str_detect(string = eye_color, pattern = c("blue", "green", "brown")))
```

### str_replace to replace string patterns

```{r}
firewalks <- starwars |> 
  mutate(name_2 = str_replace(string = name, pattern = "Sky", replacement = "Fire" ))
```

### Get rid of white space or extra spaces

```{r}
# get rid of white space or extra spaces
feedback <- c("  I ate   some nachos", "Wednesday morning   ")
str_trim(feedback) # got rid of leading and trailing white space but not interior white space
feedback <- str_squish(feedback) # got rid of all extra white space
```

### Change the Cases

```{r}
# str_to* to change the case
str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)
str_to_sentence(feedback)

starwars_lc <- starwars |> 
  mutate(name_lower = str_to_lower(string = name))
```

## case_when()

-   another way of doing if else statements

```{r}
starwars_robot <- starwars |> 
  mutate(robot_status = case_when(
    species == "Droid" ~ "A robot!",
    species == "Human" ~ "It's a human.",
    TRUE ~ "This is something else."
  ))
```
